{"name":"Laravel4-phpexcel","tagline":"Laravel 4 wrapper for PHPOffice's PHPExcel library","body":"## Laravel 4 Wrapper for PHPExcel\r\n\r\n    Warning: This package is still in development!\r\n\r\n#Installation\r\n\r\nRequire this package in your `composer.json` and update composer. This will download the package and PHPExcel of PHPOffice.\r\n```php\r\n\"maatwebsite/excel\": \"dev-master\"\r\n```\r\n\r\nAfter updating composer, add the ServiceProvider to the providers array in `app/config/app.php`\r\n```php\r\n'Maatwebsite\\Excel\\ExcelServiceProvider',\r\n```\r\n\r\nYou can use the facade for shorter code. Add this to your aliasses:\r\n```php\r\n'Excel' => 'Maatwebsite\\Excel\\Facades\\Excel',\r\n```\r\n\r\n#Exporting\r\n\r\nFor creating an Excel file use:\r\n```php\r\nExcel::create('ExcelName')\r\n        ->sheet('SheetName')\r\n            ->with(array('data', 'data'))\r\n        ->export('xls');\r\n```\r\n\r\nMultiple sheets are allowed\r\n```php\r\nExcel::create('ExcelName')\r\n        ->sheet('SheetName')\r\n            ->with(array('data', 'data'))\r\n        ->sheet('SheetName')\r\n            ->with(array('data', 'data'))\r\n        ->export('xls');\r\n```\r\n\r\nExport as CSV by using:\r\n```php\r\n->export('csv');\r\n```\r\n\r\n#Export from View file\r\n\r\nIt's possible to export a blade view file to xls or csv. The view file must be a table.\r\nUse `loadView()` with a view file and data to be used inside the view.\r\n```php\r\nExcel::loadView('folder.file', array('data'))->export('xls');\r\n```\r\n\r\nIf you want to give the file and worksheet a name chain `setTitle()` and `sheet()` after the `loadView()`\r\n```php\r\nExcel::loadView('folder.file', array('data'))\r\n        ->setTitle('Title')\r\n        ->sheet('SheetName')\r\n        ->export('xls');\r\n```\r\n\r\n#Importing\r\n\r\nTo import CSV data:\r\n```php\r\nExcel::load('file.csv')->toArray();\r\n```\r\n\r\nOptionally you can select columns, by there column index.\r\nAn empty `select()`, or no select at all, means we will return all columns\r\n```php\r\nExcel::load('file.csv')->select(array(1, 2))->toArray();\r\n```\r\n\r\nIf the first row is the table heading, you can give the `load()` method an extra parameter. This will make sure the first row is interpreted as heading. These seperate columns values will be used as array indexes. Now you can select columns by their name. Note that the string will be lowercase and spaces will be replaced by `-`.\r\n```php\r\nExcel::load('file.csv', true)->select(array('column1', 'column2'))->toArray();\r\n```\r\n\r\nThe delimiter can be changed right after the file load with `setDelimiter()`. The default delimiter is `,`, which has been set in the config file\r\n```php\r\nExcel::load('file.csv')->setDelimiter(';')->toArray();\r\n```\r\n\r\nBy default cells with formulas will not be calculated. If you want to calculate them, use the `calculate()` chain. You can change the default inside the config.\r\n```php\r\nExcel::load('file.xls')->calculate()->toArray();\r\n```\r\n\r\nIf you want to limit the data which will be parsed, use `limit()`.\r\n```php\r\nExcel::load('file.csv')->limit(10)->toArray();\r\n```\r\n\r\nFor developping purposes you can choose to dump the returned parsed file to a readable array:\r\n```php\r\nExcel::load('file.csv')->dump();\r\n```\r\n\r\n#Converting\r\n\r\nTo convert from one filetype to another, use `convert()`:\r\n```php\r\nreturn Excel::load('file.csv')->convert('xls');\r\n```\r\n\r\n#Config\r\n\r\nOptional settings can be found in the config file. Use the artisan publish command to publish the config file to your project.\r\n```php\r\nphp artisan config:publish Maatwebsite/excel\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}