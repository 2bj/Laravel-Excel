{"name":"Laravel4-phpexcel","tagline":"Laravel 4 wrapper for PHPOffice's PHPExcel library","body":"## Laravel 4 Wrapper for PHPExcel v0.3.0\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/maatwebsite/excel/v/stable.png)](https://packagist.org/packages/maatwebsite/excel) [![Total Downloads](https://poser.pugx.org/maatwebsite/excel/downloads.png)](https://packagist.org/packages/maatwebsite/excel) [![Latest Unstable Version](https://poser.pugx.org/maatwebsite/excel/v/unstable.png)](https://packagist.org/packages/maatwebsite/excel) [![License](https://poser.pugx.org/maatwebsite/excel/license.png)](https://packagist.org/packages/maatwebsite/excel)\r\n\r\n#New to v0.3.0\r\n- CSV import fix\r\n- Date formatting fix\r\n- `loadView()` inline styles parsing\r\n- `store()` can return information about the storage or can be followed by `->export()`\r\n\r\n#Installation\r\n\r\nRequire this package in your `composer.json` and update composer. This will download the package and PHPExcel of PHPOffice.\r\n```php\r\n\"maatwebsite/excel\": \"dev-master\"\r\n```\r\n\r\nAfter updating composer, add the ServiceProvider to the providers array in `app/config/app.php`\r\n```php\r\n'Maatwebsite\\Excel\\ExcelServiceProvider',\r\n```\r\n\r\nYou can use the facade for shorter code. Add this to your aliasses:\r\n```php\r\n'Excel' => 'Maatwebsite\\Excel\\Facades\\Excel',\r\n```\r\n\r\n#Exporting\r\n\r\nFor creating an Excel file use:\r\n```php\r\nExcel::create('ExcelName')\r\n        ->sheet('SheetName')\r\n            ->with(array('data', 'data'))\r\n        ->export('xls');\r\n```\r\n\r\nMultiple sheets are allowed\r\n```php\r\nExcel::create('ExcelName')\r\n        ->sheet('SheetName')\r\n            ->with(array('data', 'data'))\r\n        ->sheet('SheetName')\r\n            ->with(array('data', 'data'))\r\n        ->export('xls');\r\n```\r\n\r\nExport as CSV by using:\r\n```php\r\n->export('csv');\r\n```\r\n\r\nExport as Excel2007 by using:\r\n```php\r\n->export('xlsx');\r\n```\r\n\r\n#Export from View file\r\n\r\nIt's possible to export a blade view file to xls or csv. The view file must be a table.\r\nUse `loadView()` with a view file and data to be used inside the view.\r\n```php\r\nExcel::loadView('folder.file', array('key' => 'value'))->export('xls');\r\n```\r\n\r\nIf you want to give the file and worksheet a name chain `setTitle()` and `sheet()` after the `loadView()`\r\n```php\r\nExcel::loadView('folder.file', array('key' => 'value'))\r\n        ->setTitle('Title')\r\n        ->sheet('SheetName')\r\n        ->export('xls');\r\n```\r\n\r\nIt possible to use some basic styling inside the table.\r\nHTML tags `<strong>, <i> and <b>` are supported at this moment.\r\n\r\nMost of the inline styles are parsed:\r\n\r\n| Style tag name       | Value           |\r\n| ------------- |:-------------:|\r\n| background      | #000000 |\r\n| color     | #FFFFFF     |\r\n| font-weight | bold     |\r\n| font-style | italic     |\r\n| font-weight | bold     |\r\n| font-size | 20px     |\r\n| font-family | Open Sans     |\r\n| text-decoration | underline / line-through     |\r\n| text-align | center/left/right/justify     |\r\n| vertical-align | top/middle/bottom/justify     |\r\n| borders | 1px dashed #CCC     |\r\n| border-* | 1px dashed #CCC     |\r\n\r\n#Store to server\r\n\r\nTo store the file to the server use `store($extension, $path)` The path is optional, when this is empty, the default setting in the config will be used.\r\n```php\r\n$file = Excel::loadView('folder.file', array('data'))\r\n        ->setTitle('Title')\r\n        ->sheet('SheetName')\r\n        ->store('xls');\r\n```\r\n\r\nThe `store($ext, $path, true)` method returns information about the stored file (filename, location, extension, ...);\r\n\r\nWhen the third parameter is false, it's possible to chain other methods. This example will store and export the same file:\r\n```php\r\n$file = Excel::loadView('folder.file', array('data'))\r\n        ->setTitle('Title')\r\n        ->sheet('SheetName')\r\n        ->store('xls')\r\n        ->export('xls');\r\n```\r\n\r\n#Freeze / lock rows and columns\r\n\r\nTo freeze the first row of the sheet:\r\n```php\r\n->freezeFirstRow()\r\n```\r\nTo freeze the first column of the sheet:\r\n```php\r\n->freezeFirstColumn()\r\n```\r\n\r\nTo freeze the first row and first column of the sheet:\r\n```php\r\n->freezeFirstRowAndColumn()\r\n```\r\n\r\nFreeze based on coordinate\r\n```php\r\n->setFreeze('B1')\r\n```\r\n\r\n#Importing\r\n\r\nTo import CSV data:\r\n```php\r\nExcel::load('file.csv')->toArray();\r\n```\r\n\r\nOptionally you can select columns, by there column index.\r\nAn empty `select()`, or no select at all, means we will return all columns\r\n```php\r\nExcel::load('file.csv')->select(array(1, 2))->toArray();\r\n```\r\n\r\nIf the first row is the table heading, you can give the `load()` method an extra parameter. This will make sure the first row is interpreted as heading. These seperate columns values will be used as array indexes. Now you can select columns by their name. Note that the string will be lowercase and spaces will be replaced by `-`.\r\n```php\r\nExcel::load('file.csv', true)->select(array('column1', 'column2'))->toArray();\r\n```\r\n\r\nTo change the input encoding (default is UTF8), use the third parameter of `load()`\r\n```php\r\nExcel::load('file.csv', false, 'ISO-8859-1')->toArray();\r\n```\r\n\r\nThe delimiter can be changed right after the file load with `setDelimiter()`. The default delimiter is `,`, which has been set in the config file\r\n```php\r\nExcel::load('file.csv')->setDelimiter(';')->toArray();\r\n```\r\n\r\nBy default cells with formulas will not be calculated. If you want to calculate them, use the `calculate()` chain. You can change the default inside the config.\r\n```php\r\nExcel::load('file.xls')->calculate()->toArray();\r\n```\r\n\r\nBy default cells will date/timestamps will be parsed to a PHP date Object and converted to Y-m-d.\r\nYou can disable this feature by using `formatDates(false)`\r\n```php\r\nExcel::load('file.xls')->formatDates(false)->toArray();\r\n```\r\n\r\nThe date format can be changed by using `setDateFormat('Y-m-d')`. You can use all PHP Datetime formats;\r\n```php\r\nExcel::load('file.xls')->setDateFormat('Y-m-d')->toArray();\r\n```\r\n\r\nOptionally you can use Carbon to format the date. Use `useCarbon($methodName)`\r\n```php\r\nExcel::load('file.xls')->useCarbon('diffForHumans')->toArray();\r\n```\r\n\r\nIf you want to limit the data which will be parsed, use `limit()`.\r\n```php\r\nExcel::load('file.csv')->limit(10)->toArray();\r\n```\r\n\r\nIf you want to output the loaded data to an object, use `toObject()`\r\n```php\r\nExcel::load('file.csv')->toObject();\r\n```\r\n\r\nFor developping purposes you can choose to dump the returned parsed file to a readable array:\r\n```php\r\nExcel::load('file.csv')->dump();\r\n```\r\n\r\n#Converting\r\n\r\nTo convert from one filetype to another, use `convert()`:\r\n```php\r\nreturn Excel::load('file.csv')->convert('xls');\r\n```\r\n\r\n#Cell and range formatting\r\n\r\nIf you want to format a certain column or range, you can use `setColumnFormat(array())`.\r\nUse the column coordinate or range as array index and use the format code as array value.\r\n\r\nExample to get two leading zeros before the number:\r\n```php\r\n->setColumnFormat(array(\r\n    'A2:K2' => '0000'\r\n )\r\n```\r\n\r\n#Auto filter\r\n\r\nSetting filters on the heading\r\n```php\r\n->setAutoFilter()\r\n```\r\n\r\n#Setting and styling borders\r\n\r\nTo style and set all borders use:\r\n```php\r\n->setAllBorder('thick')\r\n```\r\n\r\nTo style the border of a range\r\n```php\r\n->setBorder('A1:F10,'thick')\r\n```\r\n\r\nYou can use all the PHP Excel border styles.\r\n\r\n#Config\r\n\r\nOptional settings can be found in the config file. Use the artisan publish command to publish the config file to your project.\r\n```php\r\nphp artisan config:publish maatwebsite/excel\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}